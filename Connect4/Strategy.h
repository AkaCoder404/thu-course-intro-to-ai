/******************************************************** *	Strategy.h : 策略接口文件                           * *	张永锋                                              * *	zhangyf07@gmail.com                                 * *	2014.5                                              * *********************************************************/#ifndef STRATEGY_H_#define	STRATEGY_H_#include "Point.h"#include "Judge.h"extern "C" Point* getPoint(const int M, const int N, const int* top, const int* _board,                           const int lastX, const int lastY, const int noX, const int noY);extern "C" void clearPoint(Point* p);void clearArray(int M, int N, int** board);int m, n, nox, noy, **myboard;const int *__board;int maxDepth;bool TLE;const int TL = 2000000;const int TM = 80000;clock_t start;const int INF = 1000;const int score[4] = {0, 1, 5, 15};//  连1，连2，连3分数const int NEAR = 3;void Initialize(const int M, const int N, const int* _board, const int lastX, const int lastY, const int noX, const int noY, int **board){    start = clock();    TLE = false;    if (_board != __board)    {        _board = __board;        m = M;        n = N;        nox = noX;        noy = noY;        myboard = board;        maxDepth = 5;    }    if (lastX == -1)        maxDepth = 5;}inline bool Forbidden(int x, int y){    return x == nox && y == noy;}inline int BoardTop(int y){    int x;    for (x = m - 1; x >= 0; --x)        if (myboard[x][y] == 0 && !Forbidden(x, y))            break;    return x;}inline void JudgeTLE(){    if (!TLE && clock() - start > TL / 2)    {        TLE = true;        maxDepth--;    }}void JudgeTM(int maxval){    if (clock() - start < TM && maxval > -INF && maxval < INF)        maxDepth++;}int SearchMax(int depth, int alpha, int beta);int SearchMin(int depth, int alpha, int beta);inline int F(int player);inline bool NearValid(int x, int y){    int &&delta = BoardTop(y) - x;    return delta >= 0 && delta < NEAR;}void Print(){    for (int i = 0; i < m; i++)    {        for (int j = 0; j < n; j++)            switch (myboard[i][j]) {                case 0:                    std::cout << ". ";                    break;                case 1:                    std::cout << "A ";                    break;                case 2:                    std::cout << "B ";                    break;                default:                    break;            }        std::cout << std::endl;    }}#endif